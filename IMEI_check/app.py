from flask import Flask, request, jsonify
import requests
import telebot
from datetime import datetime
from config import Config, load_config

app = Flask(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é config
config: Config = load_config()

# –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
WHITELIST = {123456789}  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ Telegram ID

# –¢–æ–∫–µ–Ω API imeicheck.net
SERVICE_TOKEN = config.service.token
SERVICE_URL = config.service.url

# –¢–æ–∫–µ–Ω —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ API –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
ENDPOINT_TOKEN = config.api_access.token

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
bot = telebot.TeleBot(config.tg_bot.token)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IMEI —á–µ—Ä–µ–∑ API imeicheck.net
def check_imei(imei):
    headers = {
        'Authorization': f'Bearer {SERVICE_TOKEN}',
        'Content-Type': 'application/json'
    }
    response = requests.post(SERVICE_URL, json={'imei': imei}, headers=headers)
    if response.status_code == 200:
        return response.json()
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–µ–ª–µ–≥—Ä–∞–º
def format_response(data):
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É, –∏ —Å–∏—Ç—É–∞—Ü–∏–∏ 'status': 'unsuccessful'
    if not data or 'properties' not in data or not isinstance(data['properties'], dict):
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    properties = data['properties']
    formatted_text = (
        f"üì± *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:*\n\n"
        f"‚Ä¢ *–ú–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:* {properties.get('apple/modelName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"‚Ä¢ *–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:* {properties.get('modelDesc', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"‚Ä¢ *IMEI:* {properties.get('imei', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"‚Ä¢ *IMEI 2:* {properties.get('imei2', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"‚Ä¢ *–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä:* {properties.get('serial', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"‚Ä¢ *MEID:* {properties.get('meid', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"‚Ä¢ *–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏:* {datetime.fromtimestamp(properties.get('estPurchaseDate', 0)).strftime('%Y-%m-%d') if properties.get('estPurchaseDate') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        f"‚Ä¢ *–ì–∞—Ä–∞–Ω—Ç–∏—è:* {'–ï—Å—Ç—å' if properties.get('warrantyStatus') == 'In Warranty' else '–ù–µ—Ç'}\n"
        f"‚Ä¢ *–ë—ã–ª–æ –≤ —Ä–µ–º–æ–Ω—Ç–µ:* {'–î–∞' if properties.get('replaced') else '–ù–µ—Ç'}\n"
        f"‚Ä¢ *–†–µ–∂–∏–º –ø—Ä–æ–ø–∞–∂–∏:* {'–ê–∫—Ç–∏–≤–µ–Ω' if properties.get('lostMode') else '–ù–µ –∞–∫—Ç–∏–≤–µ–Ω'}\n"
        f"‚Ä¢ *–°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–°–®–ê):* {properties.get('usaBlockStatus', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"‚Ä¢ *–°–µ—Ç—å:* {properties.get('network', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"‚Ä¢ *–°–∏–º-–ª–æ–∫:* {'–î–∞' if properties.get('simLock') else '–ù–µ—Ç'}\n"
        f"‚Ä¢ *–†–µ–∂–∏–º FMI (Find My iPhone):* {'–í–∫–ª—é—á–µ–Ω' if properties.get('fmiOn') else '–í—ã–∫–ª—é—á–µ–Ω'}\n"
    )
    return formatted_text

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    if user_id not in WHITELIST:
        bot.reply_to(message, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.')
        return

    imei = message.text
    if not imei.isdigit() or len(imei) != 15:
        bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IMEI. IMEI –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 15 —Ü–∏—Ñ—Ä.')
        return

    result = check_imei(imei)
    if result:
        formatted_result = format_response(result)
        bot.reply_to(message, formatted_result, parse_mode='Markdown')
    else:
        bot.reply_to(message, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IMEI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

# –≠–Ω–¥–ø–æ–∏–Ω—Ç API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IMEI
@app.route('/api/check-imei', methods=['POST'])
def api_check_imei():
    data = request.json
    imei = data.get('imei')
    token = data.get('token')

    if not imei or not token:
        return jsonify({'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å IMEI –∏ —Ç–æ–∫–µ–Ω.'}), 400

    if token != ENDPOINT_TOKEN:
        return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.'}), 403

    result = check_imei(imei)
    if result:
        return jsonify(result)
    return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IMEI.'}), 500

# –ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ Telegram-–±–æ—Ç–∞
if __name__ == '__main__':
    from threading import Thread

    # –ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=app.run, kwargs={'host': '0.0.0.0', 'port': 5000}).start()

    # –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
    bot.polling(none_stop=True)